// Функция, которая принимает два параметра: тип данных и деструктуризированный массив данных,
// которая затем фильтрует массив и записывает отфилтрованныые по типу данные в массив values
const filterByType = (type, ...values) => values.filter(value => typeof value === type),

// Функция, которая получает нод-лист всех блоков, где происходит вывод сообщения с результатом, и преобразует
// его в массив. Затем перебирает этот массив и каждому из элементов задает свойство display = 'none'
	hideAllResponseBlocks = () => {
		const responseBlocksArray = Array.from(document.querySelectorAll('div.dialog__response-block'));
		responseBlocksArray.forEach(block => block.style.display = 'none');
	},

// Функция, принимающая три параметра: селектор, текст, котоырй необходимо отобразить, 
// и спан в селекторе, в котором необходимо отобразить этт текст
	showResponseBlock = (blockSelector, msgText, spanSelector) => {
		// Вызываем предыдущую функцию, чтобы убрать все блоки, которые были до этого
		hideAllResponseBlocks();

		// Выбираем блок по переданному селектору и задаем ему свойство display = 'block';
		document.querySelector(blockSelector).style.display = 'block';

		// Если был передан спан, куда помещать текст,
		// то находим его в документе и помещаем в него переданный текст
		if (spanSelector) {
			document.querySelector(spanSelector).textContent = msgText;
		}
	},

	// Функция, принимающая текст, и вызывающая предыдущую функцию с селекторами ошибки
	showError = msgText => showResponseBlock('.dialog__response-block_error', msgText, '#error'),

	
	// Функция, принимающая текст, и вызывающая предыдущую функцию с селекторами для вывода положительного результата
	showResults = msgText => showResponseBlock('.dialog__response-block_ok', msgText, '#ok'),

	// Если нечего отображать, то отображается изначально "пустой" блок с текстом по-умолчанию
	showNoResults = () => showResponseBlock('.dialog__response-block_no-results'),

	// Вызов первой функции с обработчиком ошибок try... catch...,
	// принимающая тип и значения инпутов в качестве аргументов
	tryFilterByType = (type, values) => {
		// Используем try для отработки "обычного" кода, которйы должен выполниться в этой функции,
		// но если получим ошибку, то программа не остановится окончательно, а укажет на ошибку.
		// Таким образом, не оставит пользователя ждать результата 
		try {
			// В первую переменную записываем результат выполнения самой первой функции
			// в качестве строки, разделенной запятыми.
			// При чем, eval(`filterByType('${type}', ${values})`) возвращает массив из значений, прошедших
			// филтрацию, а метод join соединяет потом весь этот массив в строку
			const valuesArray = eval(`filterByType('${type}', ${values})`).join(", ");

			// Во вторую переменную присваиваем сообщение, которое будет отображаться, в зависимости от условий:
			// Если данные указанного типа присутсвуют (длина этой строки не равна 0)
			const alertMsg = (valuesArray.length) ?

			// То сохраняется сообщение ниже
				`Данные с типом ${type}: ${valuesArray}` :

			// Если же нет, то сообщение ниже
				`Отсутствуют данные типа ${type}`;

			// Затем вызывается функция showResluts с переданным в нее сообщением
			showResults(alertMsg);

		// если на стадии выполнения кода после try и до catch возникнет какая-то ошибка, то
		// вызовется функция showError() с сообщением об ошибке
		} catch (e) {
			showError(`Ошибка: ${e}`);
		}
	};

// Находим кнопку филтрации и записываем ее в переменную
const filterButton = document.querySelector('#filter-btn');

// Добавляем на эту кнопку слушатель события "клик" и передаем в функцию само событие
filterButton.addEventListener('click', e => {

	// ПОлучаем в переменные селектор выбора искомого типа
	const typeInput = document.querySelector('#type');

	// и инпут, в котором будут указан текст
	const dataInput = document.querySelector('#data');

	// Если инпут будет пустой
	if (dataInput.value === '') {
		// То всплывет подсказка от браузера по умолчанию с указанным текстом
		dataInput.setCustomValidity('Поле не должно быть пустым!');

		// и вызовется функция ниже, в которой показан текст по-умолчанию
		showNoResults();

	// в противном же случае
	} else {
		// подсказка от браузера будет пустой и, соотвественно, не покажется
		dataInput.setCustomValidity('');

		// остановим поведение формы по-умолчанию при клике на кнопку с типом submit
		e.preventDefault();

		// вызываем функцию ниже с переданными в нее значениями типа из селектора
		// и самой строки, при чем
		// С обрезанными пробелами по краям, если они есть
		tryFilterByType(typeInput.value.trim(), dataInput.value.trim());
	}
});

